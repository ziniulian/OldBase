<html  style="height:100%" >
	<head>
		<title>t面试Demo</title>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<script src="../../../../LZR.js"></script>
		<script>
			var box = null;
			var w3d = null;

			function BoxMap (obj) {
				this.map = {
					w: 1000,
					h: 1000,
					data: "data/map.jpg"
				};

				this.box = {
					minlon: 0,
					minlat: 0,
					maxlon: 0,
					maxlat: 0,
					top: 250,
					left: 250,
					w: 500,
					h: 500,
					z: 300,
					obj: null
				};

				this.center = null;
				this.min = 0;
				this.max = 0;
				this.initMap = function() {
					if (this.map.w < this.map.h) {
						this.max = this.map.h;
					} else {
						this.max = this.map.w;
					}
					this.center = {
						x: this.box.left + this.box.w/2,
						y: this.box.top + this.box.h/2,
						z: 0
					};
					if (this.center.x < this.center.y) {
						this.min = this.center.x;
					} else {
						this.min = this.center.y;
					}
					if ((this.map.h - this.center.y) < this.min) {
						this.min = this.map.h - this.center.y;
					}

					var g = new THREE.PlaneGeometry(this.map.w, this.map.h);
					g.vertices[0].x = -this.center.x;
					g.vertices[0].y = this.center.y;
					g.vertices[1].x = this.map.w - this.center.x;
					if (g.vertices[1].x < this.min) {
						this.min = g.vertices[1].x;
					}
					g.vertices[1].y = this.center.y;
					g.vertices[2].x = -this.center.x;
					g.vertices[2].y = this.center.y - this.map.h;
					g.vertices[3].x = this.map.w - this.center.x;
					g.vertices[3].y = this.center.y - this.map.h;

					this.map.obj = new THREE.Mesh (
						g,
						new THREE.MeshBasicMaterial ({
							map:THREE.ImageUtils.loadTexture (this.map.data),
							side:THREE.DoubleSide
						})
					);
				};

				this.initBox = function() {
					this.box.obj = new LZR.HTML5.WebGL.Three.PositionBox( {
						x: 0,
						y: 0,
						lat: this.box.minlat + (this.box.maxlat - this.box.minlat)/2,
						lng: this.box.minlon + (this.box.maxlon - this.box.minlon)/2,
						min: 1,
						max: this.min,
						imgUrl: {}
					});
					this.box.obj.init(this.box.w/2, this.box.h/2, this.box.z);
					this.box.obj.create();
				};

				this.initCav = function (cav) {
					this.cav = cav;
					this.wb = new LZR.HTML5.WebGL.Three.WebBox ({
						fov: 75,
						minCtrlDistance: 10,
						maxCtrlDistance: this.max,
						cameraPosition: {
							x: 0,
							y: 0,
							z: this.max
						},
						canvas: cav
					});

					this.wb.appendMesh( "map",  this.map.obj);
					this.wb.appendMesh( "box",  this.box.obj.create());
				};

			}

 			function init() {
				LZR.HTML5.jsPath = LZR.HTML5.upPath(4);
				LZR.HTML5.loadJs([ LZR.HTML5.jsPath + "HTML5/WebGL/THREE/WebBox.js"]);

				// open
				var bm = new BoxMap();
				bm.initMap();
				bm.initBox();
				bm.initCav(document.getElementById("mainCanvas"));
			}

		</script>
	</head>

	<body style="padding: 0; margin: 0; height:100%" onload="init()">
		<div style="float:left; height:100%; width:100%"><canvas style="height:100%; width:100%" width="1000px" height="1000px" id="mainCanvas"></canvas></div>
	</body>
</html>
